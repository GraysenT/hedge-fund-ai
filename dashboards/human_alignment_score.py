```python
import numpy as np

def estimate_system_alignment(user_feedback, system_outputs, human_goals):
    """
    Estimate how understandable and aligned with human goals the system is.

    Parameters:
    user_feedback (list of int): Ratings from users on how understandable the system outputs are (1-10).
    system_outputs (list of str): Outputs generated by the system.
    human_goals (list of str): Descriptions of the goals humans have for the system.

    Returns:
    float: A score representing the alignment and understandability of the system, scaled from 0 to 100.
    """
    # Calculate understandability score based on user feedback
    understandability_score = np.mean(user_feedback)
    
    # Simulate a simple analysis of alignment by checking keyword overlaps
    goal_keywords = set(sum([goal.split() for goal in human_goals], []))
    output_keywords = set(sum([output.split() for output in system_outputs], []))
    alignment_score = len(goal_keywords & output_keywords) / len(goal_keywords) if goal_keywords else 0
    
    # Combine scores: 70% weight on understandability, 30% on alignment
    combined_score = 0.7 * understandability_score * 10 + 0.3 * alignment_score * 100
    
    return combined_score

# Example usage
user_feedback = [8, 9, 7, 8, 9]  # User ratings on understandability
system_outputs = ["generate report", "analyze data", "summarize findings"]
human_goals = ["analyze data", "report generation", "data summarization"]

alignment_score = estimate_system_alignment(user_feedback, system_outputs, human_goals)
print(f"System Alignment and Understandability Score: {alignment_score:.2f}")
```